{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:32.128754Z\",\"iopub.execute_input\":\"2022-09-15T11:00:32.129198Z\",\"iopub.status.idle\":\"2022-09-15T11:00:32.156547Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:32.129166Z\",\"shell.execute_reply\":\"2022-09-15T11:00:32.155372Z\"}}\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndataset=pd.read_csv('../input/salaries-data-science/ds_salaries.csv')\ndataset.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:33.687882Z\",\"iopub.execute_input\":\"2022-09-15T11:00:33.688813Z\",\"iopub.status.idle\":\"2022-09-15T11:00:33.696943Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:33.688767Z\",\"shell.execute_reply\":\"2022-09-15T11:00:33.695672Z\"}}\ndataset.columns # print the column name \n\n# %% [markdown]\n# # experience_level -> The experience level in the job during the year with the following possible values: EN Entry-level / Junior MI Mid-level / Intermediate SE Senior-level / Expert EX Executive-level / Director\n# # \n# # employment_type -> The type of employement for the role: PT Part-time FT Full-time CT Contract FL Freelance\n# # \n# # salary -> The total gross salary amount paid.\n# # \n# # salary_currency -> The currency of the salary paid as an ISO 4217 currency code.\n# # \n# # salaryinusd -> The salary in USD (FX rate divided by avg. USD rate for the respective year via fxdata.foorilla.com).\n# # \n# # employee_residence -> Employee's primary country of residence in during the work year as an ISO 3166 country code.\n# # \n# # remote_ratio -> The overall amount of work done remotely, possible values are as follows: 0 No remote work (less than 20%) 50 Partially remote 100 Fully remote (more than 80%)\n# # \n# # company_location -> The country of the employer's main office or contracting branch as an ISO 3166 country code.\n# # \n# # company_size -> The average number of people that worked for the company during the year: S less than 50 employees (small) M 50 to 250 employees (medium) L more than 250 employees (large)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:36.487662Z\",\"iopub.execute_input\":\"2022-09-15T11:00:36.488429Z\",\"iopub.status.idle\":\"2022-09-15T11:00:36.498448Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:36.488393Z\",\"shell.execute_reply\":\"2022-09-15T11:00:36.497519Z\"}}\ndataset.isnull().sum() # check whether any null values are present or not \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:37.467802Z\",\"iopub.execute_input\":\"2022-09-15T11:00:37.468630Z\",\"iopub.status.idle\":\"2022-09-15T11:00:37.488213Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:37.468592Z\",\"shell.execute_reply\":\"2022-09-15T11:00:37.486553Z\"}}\ndf=dataset.drop(['Unnamed: 0','salary'],axis=1) # dropped 2 columns\ndf.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:38.367540Z\",\"iopub.execute_input\":\"2022-09-15T11:00:38.368013Z\",\"iopub.status.idle\":\"2022-09-15T11:00:38.377508Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:38.367977Z\",\"shell.execute_reply\":\"2022-09-15T11:00:38.376276Z\"}}\ndf2=dataset.salary # store the salary column (target) column in to df2 \ndf2.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:39.387819Z\",\"iopub.execute_input\":\"2022-09-15T11:00:39.388651Z\",\"iopub.status.idle\":\"2022-09-15T11:00:39.412167Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:39.388611Z\",\"shell.execute_reply\":\"2022-09-15T11:00:39.411304Z\"}}\ndf3=pd.concat([df,df2],axis=1)\ndf3.head()\n\n# %% [markdown] {\"execution\":{\"iopub.status.busy\":\"2022-09-06T11:00:27.743646Z\",\"iopub.execute_input\":\"2022-09-06T11:00:27.744239Z\",\"iopub.status.idle\":\"2022-09-06T11:00:27.762753Z\",\"shell.execute_reply.started\":\"2022-09-06T11:00:27.744176Z\",\"shell.execute_reply\":\"2022-09-06T11:00:27.761681Z\"}}\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:41.449120Z\",\"iopub.execute_input\":\"2022-09-15T11:00:41.449607Z\",\"iopub.status.idle\":\"2022-09-15T11:00:41.475226Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:41.449569Z\",\"shell.execute_reply\":\"2022-09-15T11:00:41.473917Z\"}}\nfrom sklearn.preprocessing import LabelEncoder\nlb=LabelEncoder()\ndf3['company_location']=lb.fit_transform(df3['company_location'])\ndf3['company_size']=lb.fit_transform(df3['company_size'])\ndf3['experience_level']=lb.fit_transform(df3['experience_level'])\ndf3['employment_type']=lb.fit_transform(df3['employment_type'])\ndf3['job_title']=lb.fit_transform(df3['job_title'])\ndf3['salary_currency']=lb.fit_transform(df3['salary_currency'])\ndf3['employee_residence']=lb.fit_transform(df3['employee_residence'])\n#df['company_location']=lb.fit_transform(df['company_location'])\n#df['company_size']=lb.fit_transform(df['company_size'])\ndf3.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:42.488825Z\",\"iopub.execute_input\":\"2022-09-15T11:00:42.489634Z\",\"iopub.status.idle\":\"2022-09-15T11:00:42.505741Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:42.489594Z\",\"shell.execute_reply\":\"2022-09-15T11:00:42.504810Z\"}}\n#df3=df3.drop(['company_location','company_size'],axis=1)\ndf3.info()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:43.448024Z\",\"iopub.execute_input\":\"2022-09-15T11:00:43.448767Z\",\"iopub.status.idle\":\"2022-09-15T11:00:43.462392Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:43.448728Z\",\"shell.execute_reply\":\"2022-09-15T11:00:43.460963Z\"}}\ndf3=(df3-df3.min())/(df3.max()-df3.min())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:44.359284Z\",\"iopub.execute_input\":\"2022-09-15T11:00:44.360034Z\",\"iopub.status.idle\":\"2022-09-15T11:00:44.366490Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:44.359996Z\",\"shell.execute_reply\":\"2022-09-15T11:00:44.365215Z\"}}\nfrom sklearn.model_selection import train_test_split\nx=df3.iloc[:,:-1]\ny=df3.iloc[:,-1]\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:45.087558Z\",\"iopub.execute_input\":\"2022-09-15T11:00:45.088650Z\",\"iopub.status.idle\":\"2022-09-15T11:00:45.112659Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:45.088593Z\",\"shell.execute_reply\":\"2022-09-15T11:00:45.111311Z\"}}\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=4)\nx_train.corr()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:45.807773Z\",\"iopub.execute_input\":\"2022-09-15T11:00:45.808814Z\",\"iopub.status.idle\":\"2022-09-15T11:00:46.658594Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:45.808769Z\",\"shell.execute_reply\":\"2022-09-15T11:00:46.657389Z\"}}\nsns.heatmap(x_train.corr(),annot=True,fmt='.0%',center=2) # correlation mapping \n\n# %% [markdown]\n# # Apply Pearson Correlation to remove unwanted features whose who are highly correlated \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:47.387751Z\",\"iopub.execute_input\":\"2022-09-15T11:00:47.388580Z\",\"iopub.status.idle\":\"2022-09-15T11:00:47.396114Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:47.388541Z\",\"shell.execute_reply\":\"2022-09-15T11:00:47.395320Z\"}}\ndef correlation(dataset,threshold):\n    col_crr=set()\n    corr_matrix=dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i,j])>threshold:\n                colname=corr_matrix.columns[i]\n                col_crr.add(colname)\n    return col_crr\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:48.307513Z\",\"iopub.execute_input\":\"2022-09-15T11:00:48.308713Z\",\"iopub.status.idle\":\"2022-09-15T11:00:48.319538Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:48.308666Z\",\"shell.execute_reply\":\"2022-09-15T11:00:48.318385Z\"}}\ncorr_features=correlation(x_train,0.7)\nlen(set(corr_features))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:49.107978Z\",\"iopub.execute_input\":\"2022-09-15T11:00:49.108617Z\",\"iopub.status.idle\":\"2022-09-15T11:00:49.115001Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:49.108581Z\",\"shell.execute_reply\":\"2022-09-15T11:00:49.113800Z\"}}\ncorr_features # correlation features which are highly correlated\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:49.787676Z\",\"iopub.execute_input\":\"2022-09-15T11:00:49.788423Z\",\"iopub.status.idle\":\"2022-09-15T11:00:49.796025Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:49.788383Z\",\"shell.execute_reply\":\"2022-09-15T11:00:49.794558Z\"}}\nx_train=x_train.drop(corr_features,axis=1)\nx_test=x_test.drop(corr_features,axis=1)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:50.187034Z\",\"iopub.execute_input\":\"2022-09-15T11:00:50.187503Z\",\"iopub.status.idle\":\"2022-09-15T11:00:50.195988Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:50.187468Z\",\"shell.execute_reply\":\"2022-09-15T11:00:50.195053Z\"}}\nfeature_names=x_train.columns\nfeature_names\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:50.477746Z\",\"iopub.execute_input\":\"2022-09-15T11:00:50.479119Z\",\"iopub.status.idle\":\"2022-09-15T11:00:50.497850Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:50.479063Z\",\"shell.execute_reply\":\"2022-09-15T11:00:50.496872Z\"}}\nx_train.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:51.167758Z\",\"iopub.execute_input\":\"2022-09-15T11:00:51.169052Z\",\"iopub.status.idle\":\"2022-09-15T11:00:51.186423Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:51.169006Z\",\"shell.execute_reply\":\"2022-09-15T11:00:51.185385Z\"}}\nx_test.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:52.129267Z\",\"iopub.execute_input\":\"2022-09-15T11:00:52.130770Z\",\"iopub.status.idle\":\"2022-09-15T11:00:52.149482Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:52.130720Z\",\"shell.execute_reply\":\"2022-09-15T11:00:52.148534Z\"}}\nx_train.corr() # after feature selection, correlation matrix\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:52.557830Z\",\"iopub.execute_input\":\"2022-09-15T11:00:52.558628Z\",\"iopub.status.idle\":\"2022-09-15T11:00:52.577727Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:52.558586Z\",\"shell.execute_reply\":\"2022-09-15T11:00:52.576419Z\"}}\nx_train.cov() # covariance matrix\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:52.787964Z\",\"iopub.execute_input\":\"2022-09-15T11:00:52.788734Z\",\"iopub.status.idle\":\"2022-09-15T11:00:52.826946Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:52.788694Z\",\"shell.execute_reply\":\"2022-09-15T11:00:52.825968Z\"}}\nx_train.describe() # a few statistical analysis \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:53.507790Z\",\"iopub.execute_input\":\"2022-09-15T11:00:53.508388Z\",\"iopub.status.idle\":\"2022-09-15T11:00:53.531558Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:53.508349Z\",\"shell.execute_reply\":\"2022-09-15T11:00:53.530625Z\"}}\nx_train\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:54.017791Z\",\"iopub.execute_input\":\"2022-09-15T11:00:54.019156Z\",\"iopub.status.idle\":\"2022-09-15T11:00:54.029850Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:54.019054Z\",\"shell.execute_reply\":\"2022-09-15T11:00:54.028415Z\"}}\ny_train\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:54.238093Z\",\"iopub.execute_input\":\"2022-09-15T11:00:54.238610Z\",\"iopub.status.idle\":\"2022-09-15T11:00:54.260061Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:54.238571Z\",\"shell.execute_reply\":\"2022-09-15T11:00:54.258864Z\"}}\nx_test\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:54.778083Z\",\"iopub.execute_input\":\"2022-09-15T11:00:54.779030Z\",\"iopub.status.idle\":\"2022-09-15T11:00:54.789971Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:54.778963Z\",\"shell.execute_reply\":\"2022-09-15T11:00:54.788630Z\"}}\ny_test\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:55.688034Z\",\"iopub.execute_input\":\"2022-09-15T11:00:55.688869Z\",\"iopub.status.idle\":\"2022-09-15T11:00:55.713214Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:55.688825Z\",\"shell.execute_reply\":\"2022-09-15T11:00:55.711624Z\"}}\nfrom sklearn import tree \ndtree=tree.DecisionTreeRegressor()\ndtree.fit(x_train,y_train)\nprediction=dtree.predict(x_test)\ndata={'Actual':y_test,'Prediction':prediction,'Error':y_test-prediction}\ndata=pd.DataFrame(data)\ndata.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:00:58.697392Z\",\"iopub.execute_input\":\"2022-09-15T11:00:58.697830Z\",\"iopub.status.idle\":\"2022-09-15T11:00:58.706862Z\",\"shell.execute_reply.started\":\"2022-09-15T11:00:58.697797Z\",\"shell.execute_reply\":\"2022-09-15T11:00:58.705821Z\"}}\nfrom sklearn import metrics\nrmse1=np.sqrt(metrics.mean_squared_error(y_test,prediction))\nmse1=metrics.mean_squared_error(y_test,prediction)\nmae1=metrics.mean_absolute_error(y_test,prediction)\nprint(\"RMSE : \",rmse1)\nprint(\"MSE : \",mse1)\nprint(\"MAE : \", mae1)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:01:06.800910Z\",\"iopub.execute_input\":\"2022-09-15T11:01:06.802108Z\",\"iopub.status.idle\":\"2022-09-15T11:01:06.823961Z\",\"shell.execute_reply.started\":\"2022-09-15T11:01:06.802061Z\",\"shell.execute_reply\":\"2022-09-15T11:01:06.822650Z\"}}\nimport sys\ndef pso(particles,iterations,dimensions,inertia):\n  max_d=40\n  min_d=10\n  max_f=1e-5\n  min_f=1e-8\n  max_id=1e-4\n  min_id=1e-1\n  max_l=0.5\n  min_l=0.1\n  x=np.random.rand(particles,1)*(max_d - min_d)+min_d\n  y=np.random.rand(particles,1)*(max_f - min_f)+min_f\n  z=np.random.rand(particles,1)*(max_id - min_id)+min_id\n  q=np.random.rand(particles,1)*(max_l - min_l)+min_l\n  c=np.concatenate((x,y,z,q),axis=1)\n  v=np.zeros((particles,dimensions))\n  c1=2\n  c2=2\n  p_best=np.zeros((particles,dimensions))\n  p_best_val=np.zeros(particles)+sys.maxsize\n  g_best=np.zeros(dimensions)\n  g_best_val=sys.maxsize\n  best_iter=np.zeros(iterations)\n  p_best_RGS=np.empty((particles),dtype=object)\n  g_best_RGS=sys.maxsize\n  #plot(c)\n  from sklearn.metrics import mean_squared_error\n  for i in range(iterations):\n    for j in range(particles):\n      rgs=tree.DecisionTreeRegressor(max_depth=c[j][0],max_features=c[j][1],min_impurity_decrease=c[j][2],\n                                     min_samples_leaf=c[j][3])\n      rgs.fit(x_train,y_train)\n      y_predict=rgs.predict(x_test)\n      mse=mean_squared_error(y_test,y_predict)\n\n      if(mse<p_best_val[j]):\n        p_best_val[j]=mse\n        p_best_RGS[j]=rgs\n        p_best[j]=c[j].copy()\n\n      aux=np.argmin(p_best_val)\n      if(p_best_val[aux] < g_best_val):\n        g_best_val=p_best_val[aux]\n        g_best=p_best[aux].copy()\n        g_best_RGS=p_best_RGS[aux]\n\n      rand1=np.random.random()\n      rand2=np.random.random()\n\n      w=inertia\n      \n      v[j]=w*v[j]+c1*(p_best[j]-c[j])*rand1+c2*(g_best-c[j])*rand2\n      c[j]=c[j]+v[j]\n\n      if(c[j][3] <min_l):\n        c[j][3]=min_l\n      if(c[j][3] >max_l):\n        c[j][3]=max_l\n      if(c[j][2] <min_id):\n        c[j][2]=min_id\n      if(c[j][2] >max_id):\n        c[j][2]=max_id\n      if(c[j][1]<min_f):\n        c[j][1]=min_f\n      if(c[j][1]>max_f):\n        c[j][1]=max_f\n      if(c[j][0]<min_d):\n        c[j][0]=min_d\n      if(c[j][0]>max_d):\n        c[j][0]=max_d\n      \n    best_iter[i]=g_best_val\n\n    print('best value iteration %d = %f\\n' %(i,g_best_val))\n\n  print('group best configuration found')\n  print(g_best)\n  print('\\n')\n  print('best regressor \\n')\n  print(g_best_RGS)\n  print('\\n')\n\n  t=range(iterations)\n  plt.plot(t,best_iter,label='Fitness Value')\n  plt.legend()\n  plt.show()\n  #plot(c)\n\n  predict_test=g_best_RGS.predict(x_test)\n  #print(color.BOLD + \"predictions with the population best value found:\\n\" + color.END)\n  evaluate(predict_test)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:01:08.487961Z\",\"iopub.execute_input\":\"2022-09-15T11:01:08.488439Z\",\"iopub.status.idle\":\"2022-09-15T11:01:08.497386Z\",\"shell.execute_reply.started\":\"2022-09-15T11:01:08.488400Z\",\"shell.execute_reply\":\"2022-09-15T11:01:08.496149Z\"}}\ndef evaluate(predictions):\n  from sklearn.metrics import mean_squared_error\n  import statistics as st\n  predict_test=predictions\n\n  plt.plot(range(len(y_test)),y_test,label='Real')\n  plt.plot(range(len(predict_test)),predict_test,label='Predicted')\n  plt.legend()\n  plt.show()\n  \n  mse=mean_squared_error(y_test,predict_test)\n  print(\"\\n\")\n  print(\"mean squared error: \\t %f \"%mse)\n  print(\"\\n\")\n  print('prediction average: \\t %f'%((predict_test.sum()/len(predict_test))))\n  print(\"\\n\")\n  print('prediction median:\\t %f' %(st.median(predict_test)))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:01:09.497439Z\",\"iopub.execute_input\":\"2022-09-15T11:01:09.498429Z\",\"iopub.status.idle\":\"2022-09-15T11:01:21.622199Z\",\"shell.execute_reply.started\":\"2022-09-15T11:01:09.498380Z\",\"shell.execute_reply\":\"2022-09-15T11:01:21.621058Z\"}}\npso(200,20,4,1)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:01:43.567699Z\",\"iopub.execute_input\":\"2022-09-15T11:01:43.568557Z\",\"iopub.status.idle\":\"2022-09-15T11:01:43.588137Z\",\"shell.execute_reply.started\":\"2022-09-15T11:01:43.568516Z\",\"shell.execute_reply\":\"2022-09-15T11:01:43.587139Z\"}}\ndtree=tree.DecisionTreeRegressor(max_depth=23.175418462485645,\n                      max_features=4.136085538247206e-06,\n                      min_impurity_decrease=0.07407561186275792,\n                      min_samples_leaf=0.389264653215623)\ndtree.fit(x_train,y_train)\npred=dtree.predict(x_test)\ndata={'Actual':y_test,'Pred':prediction,'Error':y_test-pred}\ndata=pd.DataFrame(data)\ndata.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:01:44.788428Z\",\"iopub.execute_input\":\"2022-09-15T11:01:44.789321Z\",\"iopub.status.idle\":\"2022-09-15T11:01:44.799550Z\",\"shell.execute_reply.started\":\"2022-09-15T11:01:44.789277Z\",\"shell.execute_reply\":\"2022-09-15T11:01:44.797717Z\"}}\nrmse2=np.sqrt(metrics.mean_squared_error(y_test,pred))\nmse2=metrics.mean_squared_error(y_test,pred)\nmae2=metrics.mean_absolute_error(y_test,pred)\nprint(\"RMSE : \",rmse2)\nprint(\"MSE : \",mse2)\nprint(\"MAE : \", mae2)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2022-09-15T11:01:46.498299Z\",\"iopub.execute_input\":\"2022-09-15T11:01:46.498808Z\",\"iopub.status.idle\":\"2022-09-15T11:01:46.513918Z\",\"shell.execute_reply.started\":\"2022-09-15T11:01:46.498768Z\",\"shell.execute_reply\":\"2022-09-15T11:01:46.512929Z\"}}\nerror_data1=pd.DataFrame({'Model':['DT-Regressor','PSO-DT-Regressor'],\n                          'RMSE':[rmse1,rmse2],'MSE':[mse1,mse2],\n                         'MAE':[mae1,mae2]})\nerror_data1.head()\n\n# %% [markdown]\n# Comparison between Decision Tree algorithm and Particle Swarm Optimization based Decision Tree algorithm \n\n# %% [code]\n","metadata":{"_uuid":"9ce93438-8a7b-41d0-919c-f817149255dd","_cell_guid":"53594448-1e44-46e4-ba80-ee507fb70d1b","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2022-10-08T18:48:05.320223Z","iopub.execute_input":"2022-10-08T18:48:05.320971Z","iopub.status.idle":"2022-10-08T18:48:05.346519Z","shell.execute_reply.started":"2022-10-08T18:48:05.320876Z","shell.execute_reply":"2022-10-08T18:48:05.345353Z"},"trusted":true},"execution_count":1,"outputs":[]}]}